{"version":3,"sources":["store/API-Config.js","components/NewPost/NewPost.js","store/LikedPosts.js","components/Post/Post.js","components/FullPost/FullPost.js","containers/Posts/Test.js","containers/Posts/Posts.js","containers/Blog/Blog.js","App.js","index.js"],"names":["APIConfig","React","createContext","NewPost","props","postAPI","useContext","newPostForm","useRef","titleVal","className","ref","type","label","name","rows","value","onClick","form","current","data","title","content","author","console","log","axios","post","then","history","push","catch","error","LikedPosts","Post","likedPosts","setLikedPosts","clicked","includes","id","FullPost","headers","useState","postCall","setPostCall","renderedId","setRenderedId","useEffect","match","params","response","style","justifyContent","delete","Test","memo","increment","Posts","setValue","textInput","setTextInput","count","setCount","posts","setPosts","isLoading","setLoading","setError","setSelectedId","show","setVisibility","incrementValue","setIncrementValue","message","useMemo","num","useCallback","c","rposts","map","to","url","length","path","component","display","textAlign","onChange","event","parseInt","target","Blog","Provider","userAPI","pathname","hash","search","from","App","ReactDOM","render","document","getElementById"],"mappings":"oVAEaA,EAAYC,IAAMC,cAAc,I,eCyD9BC,EArDC,SAACC,GAEb,IACMC,EADOC,qBAAWN,GACHK,QAEfE,EAAcC,mBAEdC,EAAWD,mBAmBjB,OACI,sBAAKE,UAAU,UAAf,UACI,uBAAMC,IAAKJ,EAAX,UACI,4CACA,0CACA,uBAAOK,KAAK,OAAOC,MAAO,QAASC,KAAM,UAEzC,4CACA,0BAAWC,KAAK,IAAIF,MAAO,UAAWC,KAAM,YAE5C,2CACA,yBAAQD,MAAO,SAAUC,KAAM,SAA/B,UACI,wBAAQE,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,uBAGR,wBAAQC,QAhCQ,WAEpB,IAAMC,EAAOX,EAAYY,QACnBC,EAAO,CAAEC,MAAOH,EAAI,MAAUF,MAAOM,QAASJ,EAAI,QAAYF,MAAOO,OAAQL,EAAI,OAAWF,OAClGQ,QAAQC,IAAIL,GACZM,IAAMC,KAAKtB,EAASe,GACfQ,MAAK,SAAAR,GACFI,QAAQC,IAAI,WAAYL,GACxBhB,EAAMyB,QAAQC,KAAK,aAEtBC,OAAM,SAACC,GACJR,QAAQQ,MAAM,SAAUA,OAqB5B,uBAGA,uBAAOrB,IAAKF,EAAUG,KAAK,OAAOC,MAAO,IAAKC,KAAM,MAEpD,wBAAQG,QAAS,WAAMO,QAAQC,IAAIhB,EAASU,QAAQH,QAApD,4B,gBCnDCiB,EAAahC,IAAMC,cAAc,IC0B/BgC,G,MAvBF,SAAC9B,GAEV,MAAsCE,qBAAW2B,GAAzCE,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAEpB,OACI,0BAAS1B,UAAU,OAAOO,QAASb,EAAMiC,QAAzC,UACI,6BAAKjC,EAAMiB,QACX,qBAAKX,UAAU,OAAf,SACI,qBAAKA,UAAU,SAAf,SAAyBN,EAAMmB,WAI/BY,EAAWG,SAASlC,EAAMmC,IAEtB,wBAAQtB,QAAS,WAAQO,QAAQC,IAAI,gBAArC,uBAGA,wBAAQR,QAAS,WAAQO,QAAQC,IAAIU,GAAaC,EAAc,GAAD,mBAAKD,GAAL,CAAiB/B,EAAMmC,OAAtF,0B,eC4CLC,G,MA5DE,SAACpC,GAEd,IACMC,EADOC,qBAAWN,GACHK,QAGfoC,EAAU,CACZ,8BAA+B,IAC/B,eAAgB,oBAGpB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,MAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACND,EAAc1C,EAAM4C,MAAMC,OAAOV,MAClC,IAEHQ,qBAAU,WACFF,IAAezC,EAAM4C,MAAMC,OAAOV,IAClCb,IAAMrB,EAAUD,EAAM4C,MAAMC,OAAOV,GAAI,CAAEE,YACpCb,MAAK,SAAAsB,GACFN,EAAYM,EAAS9B,MACrB0B,EAAc1C,EAAM4C,MAAMC,OAAOV,IACjCf,QAAQC,IAAI,oCAMzB,CAACrB,IAIJ,IASIuB,EAAO,mBAAGwB,MAAO,CAAEC,eAAgB,gBAA5B,oCAcX,OAb6B,MAAzBhD,EAAM4C,MAAMC,OAAOV,KACnBZ,EACI,sBAAKjB,UAAU,WAAf,UACI,6BAAKiC,EAAStB,QACd,4BAAIsB,EAASrB,UACb,qBAAKZ,UAAU,OAAf,SACI,wBAAQO,QAhBL,WACfS,IAAM2B,OAAOhD,EAAUD,EAAM4C,MAAMC,OAAOV,GAAI,CAAEE,YAC3Cb,MAAK,SAAAsB,GACF9C,EAAMyB,QAAQC,KAAK,KACnBN,QAAQC,IAAIyB,OAYqBxC,UAAU,SAAvC,0BAOTiB,IC7DE2B,EAAOrD,IAAMsD,MAAK,SAACnD,GAI5B,OAFAoB,QAAQC,IAAI,aAEL,wBAAQR,QAASb,EAAMoD,UAAvB,sBC2IIC,EAvID,SAACrD,GAEX,IACMC,EADOC,qBAAWN,GACHK,QAGrB,EAA0BqC,mBAAS,GAAnC,mBAAO1B,EAAP,KAAc0C,EAAd,KACA,EAAkChB,mBAAS,GAA3C,mBAAOiB,EAAP,KAAkBC,EAAlB,KAEA,EAA0BlB,mBAAS,GAAnC,mBAAOmB,EAAP,KAAcC,EAAd,KAGA,EAA0BpB,mBAAS,IAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAgCtB,oBAAS,GAAzC,mBAAOuB,EAAP,KAAkBC,EAAlB,KACA,EAA0BxB,qBAA1B,mBAAOV,EAAP,KAAcmC,EAAd,KACA,EAAoCzB,mBAAS,MAA7C,mBAAmB0B,GAAnB,WACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAaC,EAAb,KAEA,EAA6C5B,mBAAS,GAAtD,mBAAO6B,EAAP,KAAwBC,EAAxB,KAqBAzB,qBAnBA,WAKImB,GAAW,GACXC,EAAS,MAETzC,IAAMrB,EAAS,CAAEoC,QAPD,CACZ,8BAA+B,OAO9Bb,MAAK,SAAAsB,GACFc,EAASd,EAAS9B,SAErBW,OAAM,SAAAC,GACHmC,EAASnC,EAAMyC,SACfP,GAAW,QAKM,IAaNQ,mBAAQ,WAJ/B,IAA8BC,EAC1BnD,QAAQC,IAAI,sBAA8B,GAANkD,KAKrC,CAAC3D,IAFJ,IASMwC,EAAYoB,uBAAY,WAC1Bd,GAAS,SAAAe,GAAC,OAAGA,EAAIN,OAElB,CAACA,IAOEO,EAASf,EAAMgB,KAAI,SAAApD,GACrB,OAAO,cAAC,IAAD,CAAMqD,GAAI5E,EAAM4C,MAAMiC,IAAM,IAAMtD,EAAKY,GAAvC,SACH,cAAC,EAAD,CACIlB,MAAOM,EAAKN,MACZE,OAAQI,EAAKJ,OACbc,QAAS,WAnCO,IAACE,IAmCoBZ,EAAKY,GAlClD6B,EAAc7B,IAmCNA,GAAIZ,EAAKY,MALsCZ,EAAKY,OAS5DjB,EAAU,mDAgBd,OAfIwD,EAAOI,OAAS,EAChB5D,EAAUwD,EAEL9C,EACLV,EAAU,4BAAIU,IAETiC,IACL3C,EAAU,+CASV,gCACI,yBAASZ,UAAU,QAAnB,SACKY,IAEL,cAAC,IAAD,CAAO6D,KAAM/E,EAAM4C,MAAMiC,IAAM,OAAQG,UAAW5C,IAGlD,sBAAKW,MAAO,CAAEkC,QAAS,OAAQjC,eAAgB,SAAUkC,UAAW,UAApE,UACI,gCACKjB,GAAQ,iDAET,wBAAQpD,QAAS,kBAAMqD,GAAeD,IAAtC,2BAGJ,gCACI,uBAAOzD,KAAK,SAASI,MAAO2C,EAAW4B,SAAU,SAACC,GAAD,OAAW5B,EAAa6B,SAASD,EAAME,OAAO1E,WAC/F,wBAAQC,QAAS,kBAAMyC,EAASC,IAAhC,yBAGJ,gCACI,cAACL,EAAD,CAAME,UAAWA,IACjB,0CAAaK,QAIjB,gCACI,wBAAQ5C,QAAS,kBAAM6C,EAASD,EAAQ,IAAxC,8BACA,wBAAQ5C,QAAS,WAAQuD,EAAkBD,EAAiB,GAAI/C,QAAQC,IAAI8C,IAA5E,+BChFLoB,EA9CF,SAACvF,GAEV,MAAoCsC,mBAAS,IAA7C,mBAAOP,EAAP,KAAmBC,EAAnB,KAEA,OAEI,cAACpC,EAAU4F,SAAX,CAAoB5E,MAChB,CACIX,QAAS,+BACTwF,QAAS,gCAHjB,SAMI,cAAC5D,EAAW2D,SAAZ,CAAqB5E,MAAO,CAAEmB,aAAYC,iBAA1C,SACI,sBAAK1B,UAAU,OAAf,UACI,iCACI,8BACI,+BACI,6BAAI,cAAC,IAAD,CAAMsE,GAAG,SAAT,sBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAI,CACVc,SAAU,YACVC,KAAM,UACNC,OAAQ,sBAHR,+BAYhB,eAAC,IAAD,WACI,cAAC,IAAD,CAAOb,KAAK,YAAYC,UAAWjF,IACnC,cAAC,IAAD,CAAOgF,KAAK,SAASC,UAAW3B,IAChC,cAAC,IAAD,CAAUwC,KAAK,IAAIjB,GAAG,WAH1B,oBC1BLkB,EATH,WAEV,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCDNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6a12bf43.chunk.js","sourcesContent":["import React from 'react';\n\nexport const APIConfig = React.createContext([]);\n","import axios from 'axios';\nimport React, { useContext, useRef } from 'react';\nimport { APIConfig } from '../../store/API-Config';\n\nimport './NewPost.css';\n\nconst NewPost = (props) => {\n\n    const APIs = useContext(APIConfig);\n    const postAPI = APIs.postAPI;\n\n    const newPostForm = useRef();\n\n    const titleVal = useRef();\n\n\n    const PostDataHandler = () => {\n\n        const form = newPostForm.current\n        const data = { title: form['title'].value, content: form['content'].value, author: form['author'].value };\n        console.log(data);\n        axios.post(postAPI, data)\n            .then(data => {\n                console.log('Success:', data);\n                props.history.push('/posts'); // push will add it to the page stack, replace will just replace the component  // props.history.replace('/posts'); \n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n\n\n    return (\n        <div className=\"NewPost\">\n            <form ref={newPostForm}>\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" label={'title'} name={'title'} />\n\n                <label>Content</label>\n                <textarea  rows=\"4\" label={'content'} name={'content'} />\n\n                <label>Author</label>\n                <select label={'author'} name={'author'} >\n                    <option value=\"Dean\">Dean</option>\n                    <option value=\"Moe\">Moe</option>\n                </select>\n            </form>\n            <button onClick={PostDataHandler}>Add Post </button>\n\n\n            <input ref={titleVal} type=\"text\" label={'i'} name={'i'} />\n\n            <button onClick={()=> {console.log(titleVal.current.value)} }>Print Val </button>\n   \n        </div>\n    );\n}\n// if i didnt use a form, you will get a Chrome sendrequest error: TypeError: Converting circular structure to JSON\nexport default NewPost;","import React from 'react';\n\nexport const LikedPosts = React.createContext([]);\n","import React, { useContext } from 'react';\nimport { LikedPosts } from '../../store/LikedPosts';\n\nimport './Post.css';\n\nconst Post = (props) => {\n\n    const { likedPosts, setLikedPosts } = useContext(LikedPosts);\n\n    return (\n        <article className=\"Post\" onClick={props.clicked}>\n            <h1>{props.title}</h1>\n            <div className=\"Info\">\n                <div className=\"Author\">{props.author}</div>\n           \n            </div>\n            {\n                likedPosts.includes(props.id)\n                    ?\n                    <button onClick={() => { console.log('ANSWER HERE'); }}>\n                        Unfollow </button>\n                    :\n                    <button onClick={() => { console.log(likedPosts); setLikedPosts([...likedPosts, props.id]) }}>\n                        Follow </button>}\n        </article>\n    );\n}\n\nexport default Post;","import React, { useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './FullPost.css';\nimport { APIConfig } from '../../store/API-Config';\n\n\nconst FullPost = (props) => {\n\n    const APIs = useContext(APIConfig);\n    const postAPI = APIs.postAPI; \n\n\n    const headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n    }\n\n    const [postCall, setPostCall] = useState({});\n    const [renderedId, setRenderedId] = useState(null); // remove this one\n\n    useEffect(() => {\n        setRenderedId(props.match.params.id);\n    }, []);\n\n    useEffect(() => {\n        if (renderedId !== props.match.params.id) {\n            axios(postAPI + props.match.params.id, { headers })\n                .then(response => {\n                    setPostCall(response.data);\n                    setRenderedId(props.match.params.id);\n                    console.log('This wont get called again ');\n                })\n        }\n        // return () =>{\n        //     console.log('post was unmounted')\n        // };\n    }, [props]);  // if I leave this empty here, it will update twice.  \n\n\n\n    const deletePost = () => {\n        axios.delete(postAPI + props.match.params.id, { headers })\n            .then(response => {\n                props.history.push('/');\n                console.log(response);\n            });\n    };\n\n\n    let post = <p style={{ justifyContent: 'space-around' }}> Please select a Post!</p>;\n    if (props.match.params.id != null) {\n        post = (\n            <div className=\"FullPost\">\n                <h1>{postCall.title}</h1>\n                <p>{postCall.content}</p>\n                <div className=\"Edit\">\n                    <button onClick={deletePost} className=\"Delete\">Delete</button>\n                </div>\n            </div>\n        );\n    }\n\n\n    return post;\n}\n\nexport default FullPost;","import React, {useRef}from 'react';\n\nexport const Test = React.memo((props) => {\n    //const renders = useRef(0);\n    console.log('renders: ');\n\n    return <button onClick={props.increment}> Test</button>  // increnet 1 \n});","import React, { useContext, useEffect, useMemo, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport Post from '../../components/Post/Post';\nimport './Posts.css';\nimport { Link, Route } from 'react-router-dom';\nimport FullPost from '../../components/FullPost/FullPost';\nimport { APIConfig } from '../../store/API-Config';\nimport { Test } from './Test';\n\n\nconst Posts = (props) => {\n\n    const APIs = useContext(APIConfig);\n    const postAPI = APIs.postAPI;\n\n    //=================EXPLANATION====================\n    const [value, setValue] = useState(0);  // click button , sends textInput\n    const [textInput, setTextInput] = useState(0);  // synced input field\n\n    const [count, setCount] = useState(0);\n    //=================EXPLANATION====================\n\n    const [posts, setPosts] = useState([]);\n    const [isLoading, setLoading] = useState(false); // indicates that is retreiving data\n    const [error, setError] = useState();\n    const [selectedId, setSelectedId] = useState(null);\n    const [show, setVisibility] = useState(false);  // Just for demonstration \n\n    const [incrementValue , setIncrementValue] = useState(1);\n\n    function fetchPostsHandler() {\n        const headers = {\n            'Access-Control-Allow-Origin': '*',\n\n        }\n        setLoading(true);\n        setError(null); // this is to set the error to null, if there were any previous errors existing \n        //console.log(isLoading);\n        axios(postAPI, { headers })\n            .then(response => {\n                setPosts(response.data);\n            })\n            .catch(error => {\n                setError(error.message);\n                setLoading(false);\n            })\n\n    }\n\n    useEffect(fetchPostsHandler, []); // This will be fetched when mounted\n\n    const postSelectedHandler = (id) => {\n        setSelectedId(id);\n    }\n\n\n    // JUST FOR EXPLNATION ==================================\n\n    function expensiveComputation(num) {\n        console.log('Computation done!  ' + num * 10);\n    };\n\n    const computeHandler = useMemo(() => {\n        return expensiveComputation();\n    }, [value]);\n    // JUST FOR EXPLNATION  ==================================\n\n    const incr = () => {\n        setCount(count + 1);\n    }\n\n    const increment = useCallback(() => {\n        setCount(c=> c + incrementValue);\n        \n    }, [incrementValue]);   \n\n\n\n    // JUST FOR EXPLNATION  ==================================\n\n    // We can do this rather than this :: <Post title={{...posts[1]}.title} />\n    const rposts = posts.map(post => {\n        return <Link to={props.match.url + '/' + post.id} key={post.id}>\n            <Post\n                title={post.title}\n                author={post.author}\n                clicked={() => { postSelectedHandler(post.id) }}\n                id={post.id} />\n        </Link>\n    });\n\n    let content = <p >No posts available</p>;\n    if (rposts.length > 0) {\n        content = rposts;\n    }\n    else if (error) {\n        content = <p>{error}</p>;\n    }\n    else if (isLoading) {\n        content = <p> Loading ... </p>;  // BONUS MAKE THIS WAIT FOR A 30 seconds\n    }\n\n    // {!isLoading && rposts.length > 0 && rposts}\n    //             {!isLoading && !error && rposts.length===0 && <div><br/><p >No posts available</p></div>}\n    //             {!isLoading && error && <p>{error}</p>}\n    //             {isLoading && <p> Loading ... </p> }  \n\n    return (\n        <div>\n            <section className=\"Posts\">\n                {content}\n            </section>\n            <Route path={props.match.url + '/:id'} component={FullPost} />\n\n\n            <div style={{ display: 'flex', justifyContent: 'center', textAlign: 'center' }}>\n                <div>\n                    {show && <label> SECRET TEXT</label>}\n                    {/* {show ?<label> SECRET TEXT</label> : null} */}\n                    <button onClick={() => setVisibility(!show)}> Hide/Show</button>\n                </div>\n\n                <div>\n                    <input type=\"number\" value={textInput} onChange={(event) => setTextInput(parseInt(event.target.value))} />\n                    <button onClick={() => setValue(textInput)}> Compute</button>\n                    {/* expensiveComputation(textInput) */}\n                </div>\n                <div>\n                    <Test increment={increment} />\n                    <div>count: {count}</div>\n                    {/* () => setCount(count + 1) */}\n                </div>\n\n                <div>\n                    <button onClick={() => setCount(count + 1)} > Make it render </button>\n                    <button onClick={() => { setIncrementValue(incrementValue + 5); console.log(incrementValue);\n                        }} > Add 5 </button>\n                </div>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default Posts;\n","import React, { useState } from 'react';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\nimport Posts from '../Posts/Posts'\nimport { Route, Link, Switch, Redirect } from 'react-router-dom';\nimport { LikedPosts } from '../../store/LikedPosts';\nimport { APIConfig } from '../../store/API-Config';\n\n\nconst Blog = (props) => {\n\n    const [likedPosts, setLikedPosts] = useState([]);\n\n    return (\n\n        <APIConfig.Provider value={\n            {\n                postAPI: 'http://localhost:8080/posts/',\n                userAPI: 'http://localhost:8080/users/'\n            }\n        }>\n            <LikedPosts.Provider value={{ likedPosts, setLikedPosts }}>\n                <div className=\"Blog\">\n                    <header>\n                        <nav>\n                            <ul>\n                                <li><Link to=\"/posts\"> Posts</Link></li>\n                                <li><Link to={{\n                                    pathname: '/new-post',                      // props.match.url + to get \n                                    hash: '#submit',\n                                    search: '?quick-submit=true'\n                                }}>New Post</Link></li>\n                                {/*<li><a href=\"/\"> Home</a></li>\n                        <li><a href=\"/new-post\"> New Post</a></li>*/}\n                            </ul>\n                        </nav>\n                    </header>\n                    {/*<Route path=\"/\" exact render={() => <h1 style={{textAlign:'center'}}>Home</h1>} />*/}\n\n                    <Switch>\n                        <Route path=\"/new-post\" component={NewPost} />\n                        <Route path=\"/posts\" component={Posts} />\n                        <Redirect from=\"/\" to=\"/posts\" />      {/* THis will change the url  */}\n                        {/* <Route render={()=> <h1> Page Not Found</h1>} />  */}\n\n                        {/* Also conditional redirect  */}\n                    </Switch>\n\n                </div>\n            </LikedPosts.Provider >\n        </APIConfig.Provider>\n    );\n}\n\n\nexport default Blog;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Blog from './containers/Blog/Blog';\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <Blog/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}